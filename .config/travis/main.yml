os: linux
dist: bionic
language: php

services:
  - mysql

cache:
  directories:
    - node_modules
    - vendor
    - $HOME/.composer/cache

env:
  global:
    - TESTS_DB_HOST=localhost
    - TESTS_DB_NAME=llms_tests
    - TESTS_DB_PASS=""
  jobs:
    - WP_VERSION=latest # 5.8
    - WP_VERSION="5.7"
    - WP_VERSION="5.6"
    - WP_VERSION="5.5"
    - WP_VERSION="5.4"

php:
  - "8.0"
  - "7.4"
  - "7.3"

jobs:
  fast_finish: true

  allow_failures:
  - env: WP_VERSION=nightly
  - env: WP_VERSION=latest RUN_CODE_COVERAGE=1
  - php: nightly

  exclude:
  # These WP Versions don't work on PHP 8.0
  - php: "8.0"
    env: WP_VERSION="5.5"
  - php: "8.0"
    env: WP_VERSION="5.4"

  include:
  - php: "8.0"
    env: PHPCS=1
  - php: nightly
    env: WP_VERSION=latest
  - php: "8.0"
    env: WP_VERSION=nightly
  - php: "7.4"
    env: WP_VERSION=latest RUN_CODE_COVERAGE=1
    before_script:
      # Download CodeClimate Test Reporter
      - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
      - chmod +x ./cc-test-reporter
    script:
      - ./cc-test-reporter before-build
      - composer run-script tests-run -- --coverage-clover clover.xml
    after_script:
      - ./cc-test-reporter after-build --coverage-input-type clover --exit-code $TRAVIS_TEST_RESULT

before_install:
  # Disable xDebug for faster builds
  - |
    if [ "1" != $RUN_CODE_COVERAGE ] && [ -f ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/xdebug.ini ]; then
      phpenv config-rm xdebug.ini
    fi
  # Raise PHP memory limit to 2048MB
  - echo 'memory_limit = 2048M' >> ~/.phpenv/versions/$(phpenv version-name)/etc/conf.d/travis.ini
  # Install composer deps.
  - |
    if [ "8" != $( php -r "echo PHP_MAJOR_VERSION;" ) ]; then
      composer install
    else
      composer run install-php8
    fi

install:
  - |
    if [ "E2E" = "$LLMS_TRAVIS_TESTS" ]; then
      sudo rm /usr/local/bin/docker-compose
      curl -L https://github.com/docker/compose/releases/download/1.25.0/docker-compose-`uname -s`-`uname -m` > docker-compose
      chmod +x docker-compose
      sudo mv docker-compose /usr/local/bin
      nvm install --lts
      npm ci
      [[ -n $DOCKER_USERNAME ]] && [[ -n $DOCKER_PASSWORD ]] && echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
      composer run env up
      composer run env:setup
      if [ "latest" != $WP_VERSION ]; then
        ./vendor/bin/llms-env version $WP_VERSION
      fi;
      WP_VERSION_REAL=$( ./vendor/bin/llms-env wp core version )
      echo $WP_VERSION_REAL
    elif [ "1" = "$PHPCS" ]; then
      echo "Nothing to install"
    else
      composer run tests-install
    fi

script:
  - |
    if [ "E2E" = "$LLMS_TRAVIS_TESTS" ]; then
      WP_VERSION=$WP_VERSION_REAL npm run test
    elif [ "1" = "$PHPCS" ]; then
      if [ "trunk" = "$TRAVIS_BRANCH" ]; then
        composer run-script check-cs-errors
      else
        composer run-script check-cs-errors -- $( git diff --name-only --diff-filter=ACMR $TRAVIS_COMMIT_RANGE )
      fi
    else
      composer run-script tests-run
    fi

after_script:
  - |
    if [ "E2E" = "$LLMS_TRAVIS_TESTS" ]; then
      ./vendor/bin/llms-env down
    fi

notifications:
  slack:
    on_success: change
    on_failure: always
    rooms:
      - secure: VzwXDPjuNCrKed9ACY7dwzyIjcnt6G1iC1LnKAOIx9fyPZ7TARLIf5bSa9M7P5w4uQHK7kpm5yFNtPHKGwaazZnCZxH8jcDMc4M8y3w6j9uNlbidOgfrCpp07lY6kpd8ViR7ANZ4V5Noz+ts8/gSA0yUib6vGP87s6RKHTyVTfNuFmHui7t6vF3S1VCXm4JmOrqmZbY9DlN+8JcyE0Ao3KOk/UDSCZICqo7cYnMci2oHGfb+2VRu49B61tASnV0r/dRu7gjEQTtqwElIJfuP0hGeAYc6bee5vFLA4EIdz2TMgr/Fm1El5eIg+1ZB4bOVEHzUlonLLGaUlqcYfKtmmYiV8BBnte1xBlEflLxYj92ethTUtTvkicVmtK50IlyL8kpb4WBwhXMEjSoKGLmdfaeNGKZ0vS/BnyDA0eWmt4EQ5ZVQL50ukhvmOAXhMB5T+K6Bg6T3yJzXIxej0MrSSNVygpeIwl5RqleXOKJJtJe3TsrsQfdqidXVrKAGSrwlwDRSMLC7JN3l99+5PEXzgb106TE0TBgrMOEClTVyH4gAjplqQ70diw9SAp0rnU518dTDj9HMvZ7KcGQgnAzKI82iB1LaWsWrMjqHtPbn/h+2vRDQNRnx8umnCmC8ezRr4l+xZ8Cb9KgrhvJW+bed3pQFmD/LerSuW6ZgHFsN/KI=
